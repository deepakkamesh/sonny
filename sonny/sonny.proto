syntax = "proto3";

package sonny;

import "empty.proto";

// DevicesRPC service definition.
service DevicesRPC {
	rpc Ping(google.protobuf.Empty) returns (google.protobuf.Empty) {} // Ping the Controller.
	rpc LEDBlink(LEDBlinkReq) returns (google.protobuf.Empty) {} // Blink LED.
	rpc LEDOn(LEDOnReq) returns (google.protobuf.Empty) {} // Turn on LED.
  rpc ServoRotate(ServoReq) returns (google.protobuf.Empty) {} // Rotate Servo.
	rpc Heading(google.protobuf.Empty) returns (HeadingRet) {} // Get Magnetometer Heading.
	rpc PIRDetect(google.protobuf.Empty) returns (PIRRet) {} // Get PIR sensor.
	rpc Distance(google.protobuf.Empty) returns (USRet) {} // Ultrasonic Distance.
	rpc ForwardSweep(SweepReq) returns (SweepRet) {} // Ultrasonic Distance.
	rpc Accelerometer(google.protobuf.Empty) returns (AccelRet) {} // Accelerometer.
	rpc BattState(google.protobuf.Empty) returns (BattRet) {} // Battery Level.
	rpc LDR(google.protobuf.Empty) returns (LDRRet) {} // LDR level.
	rpc DHT11(google.protobuf.Empty) returns (DHT11Ret) {} // Temp, Humidity.
	rpc Move(MoveReq) returns (MoveRet) {} // Motor Move back or Forward.
  rpc Turn(TurnReq) returns (TurnRet) {}// Turn right or left.
}


message TurnReq {
	int32 turns = 1;
 	uint32 rotateType = 2;
	uint32 dutyPercent = 3;
}

message TurnRet {
	uint32 m1Turns = 1;
	uint32 m2Turns = 2;
}


message MoveReq {
	int32 turns = 1;
	bool fwd = 2;
	uint32 dutyPercent = 3;
}

message MoveRet {
	uint32 m1Turns = 1;
	uint32 m2Turns = 2;
}

message HeadingRet {
	double heading = 1;
}

message LDRRet {
	uint32 adc = 1;
}

message DHT11Ret {
	uint32 temp = 1;
	uint32 humidity = 2;
}

message LEDBlinkReq {
	uint32 duration = 1; // duration in ms to blink the LED.
	uint32 times = 2; // the number of times to blink the LED.
}

message BattRet {
	float volt = 1; 
}

message LEDOnReq {
	bool On = 1;
}

message PIRRet {
	bool On = 1;
}

message ServoReq{
 uint32 servo = 1;
 uint32 angle = 2;
}

message USRet {
 int32 distance = 1;
}

message SweepReq {
 int32 angle = 1;
}

message SweepRet {
 repeated int32 distance = 1;
}

message AccelRet {
	float x = 1;
	float y = 2;
	float z = 3;
}
