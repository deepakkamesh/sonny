// Code generated by protoc-gen-go.
// source: sonny.proto
// DO NOT EDIT!

/*
Package sonny is a generated protocol buffer package.

It is generated from these files:
	sonny.proto

It has these top-level messages:
	HeadingRet
	LEDBlinkReq
	LEDOnReq
	PIRRet
*/
package sonny

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/empty"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type HeadingRet struct {
	Heading float64 `protobuf:"fixed64,1,opt,name=heading" json:"heading,omitempty"`
}

func (m *HeadingRet) Reset()                    { *m = HeadingRet{} }
func (m *HeadingRet) String() string            { return proto.CompactTextString(m) }
func (*HeadingRet) ProtoMessage()               {}
func (*HeadingRet) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type LEDBlinkReq struct {
	Duration uint32 `protobuf:"varint,1,opt,name=duration" json:"duration,omitempty"`
	Times    uint32 `protobuf:"varint,2,opt,name=times" json:"times,omitempty"`
}

func (m *LEDBlinkReq) Reset()                    { *m = LEDBlinkReq{} }
func (m *LEDBlinkReq) String() string            { return proto.CompactTextString(m) }
func (*LEDBlinkReq) ProtoMessage()               {}
func (*LEDBlinkReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type LEDOnReq struct {
	On bool `protobuf:"varint,1,opt,name=On" json:"On,omitempty"`
}

func (m *LEDOnReq) Reset()                    { *m = LEDOnReq{} }
func (m *LEDOnReq) String() string            { return proto.CompactTextString(m) }
func (*LEDOnReq) ProtoMessage()               {}
func (*LEDOnReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type PIRRet struct {
	On bool `protobuf:"varint,1,opt,name=On" json:"On,omitempty"`
}

func (m *PIRRet) Reset()                    { *m = PIRRet{} }
func (m *PIRRet) String() string            { return proto.CompactTextString(m) }
func (*PIRRet) ProtoMessage()               {}
func (*PIRRet) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func init() {
	proto.RegisterType((*HeadingRet)(nil), "sonny.HeadingRet")
	proto.RegisterType((*LEDBlinkReq)(nil), "sonny.LEDBlinkReq")
	proto.RegisterType((*LEDOnReq)(nil), "sonny.LEDOnReq")
	proto.RegisterType((*PIRRet)(nil), "sonny.PIRRet")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for DevicesRPC service

type DevicesRPCClient interface {
	Ping(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	LEDBlink(ctx context.Context, in *LEDBlinkReq, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	LEDOn(ctx context.Context, in *LEDOnReq, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	Heading(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*HeadingRet, error)
	PIRDetect(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*PIRRet, error)
}

type devicesRPCClient struct {
	cc *grpc.ClientConn
}

func NewDevicesRPCClient(cc *grpc.ClientConn) DevicesRPCClient {
	return &devicesRPCClient{cc}
}

func (c *devicesRPCClient) Ping(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/sonny.DevicesRPC/Ping", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *devicesRPCClient) LEDBlink(ctx context.Context, in *LEDBlinkReq, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/sonny.DevicesRPC/LEDBlink", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *devicesRPCClient) LEDOn(ctx context.Context, in *LEDOnReq, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/sonny.DevicesRPC/LEDOn", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *devicesRPCClient) Heading(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*HeadingRet, error) {
	out := new(HeadingRet)
	err := grpc.Invoke(ctx, "/sonny.DevicesRPC/Heading", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *devicesRPCClient) PIRDetect(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*PIRRet, error) {
	out := new(PIRRet)
	err := grpc.Invoke(ctx, "/sonny.DevicesRPC/PIRDetect", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for DevicesRPC service

type DevicesRPCServer interface {
	Ping(context.Context, *google_protobuf.Empty) (*google_protobuf.Empty, error)
	LEDBlink(context.Context, *LEDBlinkReq) (*google_protobuf.Empty, error)
	LEDOn(context.Context, *LEDOnReq) (*google_protobuf.Empty, error)
	Heading(context.Context, *google_protobuf.Empty) (*HeadingRet, error)
	PIRDetect(context.Context, *google_protobuf.Empty) (*PIRRet, error)
}

func RegisterDevicesRPCServer(s *grpc.Server, srv DevicesRPCServer) {
	s.RegisterService(&_DevicesRPC_serviceDesc, srv)
}

func _DevicesRPC_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevicesRPCServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonny.DevicesRPC/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevicesRPCServer).Ping(ctx, req.(*google_protobuf.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DevicesRPC_LEDBlink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LEDBlinkReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevicesRPCServer).LEDBlink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonny.DevicesRPC/LEDBlink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevicesRPCServer).LEDBlink(ctx, req.(*LEDBlinkReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DevicesRPC_LEDOn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LEDOnReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevicesRPCServer).LEDOn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonny.DevicesRPC/LEDOn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevicesRPCServer).LEDOn(ctx, req.(*LEDOnReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DevicesRPC_Heading_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevicesRPCServer).Heading(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonny.DevicesRPC/Heading",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevicesRPCServer).Heading(ctx, req.(*google_protobuf.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DevicesRPC_PIRDetect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevicesRPCServer).PIRDetect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonny.DevicesRPC/PIRDetect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevicesRPCServer).PIRDetect(ctx, req.(*google_protobuf.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _DevicesRPC_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sonny.DevicesRPC",
	HandlerType: (*DevicesRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _DevicesRPC_Ping_Handler,
		},
		{
			MethodName: "LEDBlink",
			Handler:    _DevicesRPC_LEDBlink_Handler,
		},
		{
			MethodName: "LEDOn",
			Handler:    _DevicesRPC_LEDOn_Handler,
		},
		{
			MethodName: "Heading",
			Handler:    _DevicesRPC_Heading_Handler,
		},
		{
			MethodName: "PIRDetect",
			Handler:    _DevicesRPC_PIRDetect_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("sonny.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 269 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x7c, 0x90, 0x5f, 0x4b, 0xc3, 0x30,
	0x14, 0xc5, 0xd7, 0x62, 0xb7, 0x7a, 0xcb, 0x14, 0x2f, 0x22, 0xa5, 0x4f, 0x92, 0x07, 0xf1, 0xa9,
	0x0f, 0x53, 0xc4, 0x37, 0x41, 0x3b, 0x50, 0x10, 0x56, 0xf2, 0x0d, 0xf6, 0xe7, 0x5a, 0x83, 0x5b,
	0x32, 0xd7, 0x4c, 0xf0, 0xeb, 0xf8, 0x49, 0x4d, 0x93, 0xcc, 0xc9, 0xa0, 0x7d, 0xcb, 0xc9, 0xbd,
	0xbf, 0xcb, 0x39, 0x07, 0x92, 0x5a, 0x49, 0xf9, 0x9d, 0xaf, 0x37, 0x4a, 0x2b, 0x8c, 0xac, 0xc8,
	0x12, 0x5a, 0xad, 0xb5, 0xff, 0x63, 0x57, 0x00, 0xcf, 0x34, 0x5d, 0x08, 0x59, 0x71, 0xd2, 0x98,
	0xc2, 0xe0, 0xdd, 0xa9, 0x34, 0xb8, 0x0c, 0xae, 0x03, 0xbe, 0x93, 0xec, 0x01, 0x92, 0xd7, 0x71,
	0xf1, 0xb8, 0x14, 0xf2, 0x83, 0xd3, 0x27, 0x66, 0x10, 0x2f, 0xb6, 0x9b, 0xa9, 0x16, 0x4a, 0xda,
	0xcd, 0x21, 0xff, 0xd3, 0x78, 0x0e, 0x91, 0x16, 0x2b, 0xaa, 0xd3, 0xd0, 0x0e, 0x9c, 0x60, 0x86,
	0x30, 0x07, 0x26, 0xb2, 0xa1, 0x4f, 0x20, 0x9c, 0x38, 0x2e, 0xe6, 0xe6, 0xc5, 0x52, 0xe8, 0x97,
	0x2f, 0xbc, 0x31, 0x70, 0x30, 0x19, 0xfd, 0x84, 0x00, 0x05, 0x7d, 0x89, 0x39, 0xd5, 0xbc, 0x7c,
	0xc2, 0x7b, 0x38, 0x2a, 0x8d, 0x1b, 0xbc, 0xc8, 0x2b, 0xa5, 0xaa, 0x25, 0xb9, 0x10, 0xb3, 0xed,
	0x5b, 0x3e, 0x6e, 0x32, 0x65, 0x2d, 0xff, 0xac, 0x67, 0xc8, 0x78, 0xe7, 0x1f, 0x31, 0x77, 0xad,
	0xfc, 0x0b, 0xd4, 0x41, 0x8e, 0x20, 0xb2, 0xc6, 0xf1, 0x74, 0x8f, 0xd9, 0x18, 0x1d, 0xcc, 0x1d,
	0x0c, 0x7c, 0xab, 0xad, 0x56, 0xcf, 0xfc, 0xb5, 0x7d, 0xfb, 0x86, 0xbb, 0x85, 0x63, 0x53, 0x44,
	0x41, 0x9a, 0xe6, 0xba, 0x95, 0x1c, 0x7a, 0xd2, 0x55, 0xc6, 0x7a, 0xb3, 0xbe, 0x5d, 0xb8, 0xf9,
	0x0d, 0x00, 0x00, 0xff, 0xff, 0x85, 0x9d, 0x47, 0x6a, 0xed, 0x01, 0x00, 0x00,
}
